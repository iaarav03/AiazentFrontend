import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { FaTimes, FaSearch } from 'react-icons/fa'; // Icons for closing and opening modal
import { FaAnglesRight } from "react-icons/fa6";
import { motion } from 'framer-motion'; // For advanced animations

const SearchComponent = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showMoreCount, setShowMoreCount] = useState(10);
  const [useCases, setUseCases] = useState([]);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    const fetchUseCases = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/usecase'); // Replace with actual API
        setUseCases(response.data);
      } catch (error) {
        console.error('Error fetching use cases:', error);
      }
    };
    fetchUseCases();
  }, []);

  const handleSearch = async (searchQuery) => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:5000/api/agents/search', {
        params: { query: searchQuery || query },
      });
      setResults(response.data);
      setShowModal(true); // Show modal after search
    } catch (error) {
      console.error('Error fetching search results:', error);
    }
    setLoading(false);
  };

  const handleUseCaseClick = (useCase) => {
    setQuery(useCase);
    handleSearch(useCase);
  };

  const handleShowMore = () => {
    setShowMoreCount(showMoreCount + 10); // Increment showMoreCount by 10 to show more results
  };

  const toggleModal = () => {
    setShowModal(!showModal); // Toggle modal visibility
  };

  // Motion Variants for Animation
  const modalVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.5, ease: 'easeInOut' } },
    exit: { opacity: 0, scale: 0.8, transition: { duration: 0.3 } }
  };

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.6, ease: 'easeOut' } },
    hover: { scale: 1.05, transition: { type: 'spring', stiffness: 300 } },
    tap: { scale: 0.95 }
  };

  return (
    <div className="w-full bg-gray-50 py-20">
      {/* Main container with max width and rounded corners */}
      <div className="max-w-7xl mx-auto  rounded-3xl p-8 "
       style={{ backgroundColor: 'rgb(110 145 172)' }}
      >
        <h1 className="text-xl font-semibold text-white mb-8"
          style={{ fontFamily: 'system-ui' }}
        >
          âœ¨ Get solution recommendations for your use case, generated by AI
        </h1>

        {/* Search Bar */}
        <form
  onSubmit={(e) => {
    e.preventDefault();
    handleSearch();
  }}
  className="relative flex w-full bg-white shadow-lg rounded-3xl p-2 py-6 border border-gray-300 transition duration-500 hover:shadow-2xl focus-within:ring-2 focus-within:ring-blue-200"
>
  <input
    type="text"
    value={query}
    onChange={(e) => setQuery(e.target.value)}
    placeholder="Enter your use case, e.g. 'AI Assistant for customer support'"
    className="flex-grow p-3 rounded-l-full focus:outline-none text-lg"
  />
  <button
    type="submit"
    className="bg-primaryBlue2 absolute bottom-2 right-2 text-white rounded-full px-6 py-3 hover:scale-95 transition duration-200"
  >
    Generate Recommendations
  </button>
</form>


        {/* Popular Use Cases */}
        <div className="w-full max-w-4xl mt-8 pl-8">
          <h2 className="text-lg  text-white mb-4">Try popular use cases:</h2>
          <div className="flex flex-wrap gap-4">
            {useCases.length > 0 ? (
              useCases.map((useCase) => (
                <button
                  key={useCase._id}
                  onClick={() => handleUseCaseClick(useCase.name)}
                  className="bg-white text-primaryBlue2 px-5 py-2 rounded-full border border-gray-200 shadow hover:shadow-lg hover:bg-blue-50 hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all duration-300"
                >
                  {useCase.name}
                </button>
                
              ))
            ) : (
              <p>No use cases found.</p>
            )}
              {(!showModal && query !== '') && (
        <button
          onClick={toggleModal}
          className="mt-4 bg-blue-50 p-3 rounded-full hover:bg-blue-600 transition duration-300 shadow-lg"
        >
          <FaAnglesRight />
        </button>
      )}
          </div>
        </div>
      </div>

      {/* Loading Spinner */}
      {loading && <div className="text-center mt-4">Loading...</div>}

      {/* Display Modal if showModal is true */}
      {showModal && (
        <motion.div
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          initial="hidden"
          animate="visible"
          exit="exit"
          variants={modalVariants}
        >
          <div className="bg-white p-8 rounded-lg shadow-2xl relative max-w-5xl w-full max-h-[80vh] overflow-y-auto">
            {/* Close icon */}
            <button
              className="absolute top-4 right-8 text-gray-600 hover:text-red-500 transition duration-300"
              onClick={toggleModal}
            >
              <FaTimes className="text-2xl fixed" />
            </button>

            {/* Modal Heading */}
            <h2 className="text-3xl font-bold mb-4 text-primaryBlue"> "{query}"</h2>

            {/* Modal content: Displaying search results */}
            <div className="w-full">
              {loading ? (
                <p className="text-center">Loading...</p>
              ) : results.length > 0 ? (
                <motion.div className="grid grid-cols-1 md:grid-cols-2 gap-6" initial="hidden" animate="visible" variants={cardVariants}>
                  {results.slice(0, showMoreCount).map((agent) => (
                    <motion.div
                      key={agent._id}
                      className="bg-white p-6 flex items-start space-x-4 hover:shadow-2xl transition-shadow duration-300 overflow-hidden"
                      whileHover="hover"
                      whileTap="tap"
                      variants={cardVariants}
                    >
                      <img
                        src={agent.logo || 'https://via.placeholder.com/80'}
                        alt={agent.name}
                        className="h-16 w-16 rounded-full object-cover"
                      />
                      <div className="flex-1">
                        <h2 className="text-xl font-bold text-blue-600">{agent.name}</h2>
                        <p className="text-gray-600 line-clamp-2">{agent.shortDescription || 'No description available.'}</p>
                        <div className="mt-2 flex flex-wrap gap-2">
                          {agent.tags && agent.tags.length > 0 ? (
                            agent.tags.map((tag, index) => (
                              <span key={index} className="bg-blue-100 text-blue-600 text-xs px-2 py-1 rounded-full">
                                {tag}
                              </span>
                            ))
                          ) : (
                            <span className="text-gray-500">No tags available.</span>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </motion.div>
              ) : (
                <p className="text-center text-gray-500">No results found. Try a different query!</p>
              )}
            </div>

            {/* Show More Button inside modal */}
            {results.length > showMoreCount && (
              <div className="flex justify-center w-full mt-6">
                <button
                  onClick={handleShowMore}
                  className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white px-6 py-3 rounded-full hover:scale-105 transform transition duration-300"
                >
                  Show More Agents
                </button>
                
              </div>
            )}
          </div>
        </motion.div>
      )}

      {/* Show icon to reopen modal when it's closed */}
    
    </div>
  );
};

export default SearchComponent;
